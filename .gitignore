1.FLOOD FILL
class Solution {
    public boolean inside(int[][] image,int r1,int c1,boolean[][] visited,int sr,int sc){
        int r = image.length;
        int c = image[0].length;
        return(r1>=0 && r1<r && c1>=0 && c1<c &&(image[r1][c1]==image[sr][sc] && !visited[r1][c1]));
    }
    public int[][] dfs(int[][] image,int r1,int c1,int newColor,boolean[][] visited,int sr,int sc,int[][]k){
    int r = image.length;
    int c = image[0].length;
    int[] neighbourrow = new int[] {-1,0,1,0};
    int[] neighbourcolumn = new int[] {0,1,0,-1};
    visited[r1][c1] = true;
    for(int m=0;m<4;m++){
        if(inside(image,r1+neighbourrow[m],c1+neighbourcolumn[m],visited,sr,sc)){
            k[r1+neighbourrow[m]][c1+neighbourcolumn[m]]=k[r1][c1];
            dfs(image,r1+neighbourrow[m],c1+neighbourcolumn[m],newColor,visited,sr,sc,k);
        }
    }
    return k;
}
    public int[][] fillcolor(int[][] image,int sr,int sc,int newColor){
        int r = image.length;
        int c = image[0].length;
        int[][] k = new int[r][c];
        for(int m=0;m<r;m++){
            for(int n=0;n<c;n++){
                k[m][n]=image[m][n];
            }
        }
        k[sr][sc]=newColor;
        boolean[][] visited = new boolean[r][c];
        for(int m=sr;m<r;m++){
            for(int n=sc;n<c;n++){
                if(image[m][n]==image[sr][sc] && !visited[m][n]){
                    k=dfs(image,m,n,newColor,visited,sr,sc,k);
                }
            }
        }
        return k;
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int[][] ans = fillcolor(image,sr,sc,newColor);
        return ans;
        
    }
}

2.NUMBER OF ISLANDS
class Solution {
    public int numIslands(char[][] grid) {
        int count_of_islands=0;
        for(int k=0;k<grid.length;k++){
            for(int l=0;l<grid[k].length;l++){
                if(grid[k][l]=='1'){
                    count_of_islands+=1;
                    bfs(grid,k,l);
                }
            }
        }
        return count_of_islands;
    }
    public void bfs(char grid[][],int k,int l){
        if(k<0||k>=grid.length||l<0||l>=grid[k].length||grid[k][l]=='0')
            return;
        grid[k][l]='0';
        bfs(grid,k+1,l);
        bfs(grid,k-1,l);
        bfs(grid,k,l-1);
        bfs(grid,k,l+1);
        
    }
}

3.NUMBER OF ORANGES
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        fresh = set()
        rotton = set()
        s = len(grid)
        p = len(grid[0])
        for k in range(s):
            for l in range(p):
                if grid[k][l] == 2:
                    rotton.add((k,l))
                elif grid[k][l] == 1:
                    fresh.add((k, l)) 
        mins = 0
        dirs = [(1,0), (-1,0), (0,1), (0,-1)]
        while len(fresh) > 0:
            infected = set()
            for r in rotton:
                row = r[0]
                col = r[1]
                for dir in dirs:
                    new_row = dir[0] + row
                    new_col = dir[1] + col
                    if (new_row, new_col) in fresh:
                        fresh.remove((new_row, new_col))
                        infected.add((new_row, new_col))   
            if len(infected) == 0:
                return -1
            rotton = infected
            mins += 1
        return mins
